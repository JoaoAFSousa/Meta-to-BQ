import pandera.pandas as pa

# campaigns_schema = pa.DataFrameSchema({
#     "account_id": pa.Column(pa.String),
#     "id": pa.Column(pa.String),
#     "name": pa.Column(pa.String),
#     "status": pa.Column(pa.String),
#     "created_time": pa.Column(pa.DateTime),
#     "updated_time": pa.Column(pa.DateTime),
#     "objective": pa.Column(pa.String),
#     "source_campaign_id": pa.Column(pa.String, nullable=True),
#     "boosted_object_id": pa.Column(pa.String, nullable=True)
# }, strict='filter', coerce=True, add_missing_columns=True)

campaigns_schema = pa.DataFrameSchema({
    'id': pa.Column(pa.String),
    'account_id': pa.Column(pa.String),
    'adlabels': pa.Column(pa.String, nullable=True),
    'bid_strategy': pa.Column(pa.String, nullable=True),
    'boosted_object_id': pa.Column(pa.String, nullable=True),
    'budget_rebalance_flag': pa.Column(pa.Bool),
    'budget_remaining': pa.Column(pa.Int),
    'buying_type': pa.Column(pa.String),
    'can_use_spend_cap': pa.Column(pa.Bool),
    'configured_status': pa.Column(pa.String),
    'created_time': pa.Column(pa.DateTime),
    'daily_budget': pa.Column(pa.Float, nullable=True),
    'effective_status': pa.Column(pa.String),
    'is_adset_budget_sharing_enabled': pa.Column(pa.Bool),
    'is_budget_schedule_enabled': pa.Column(pa.Bool),
    'is_direct_send_campaign': pa.Column(pa.Bool),
    'is_message_campaign': pa.Column(pa.Bool),
    'issues_info': pa.Column(pa.String, nullable=True),
    'last_budget_toggling_time': pa.Column(pa.DateTime, nullable=True),
    'lifetime_budget': pa.Column(pa.Float, nullable=True),
    'name': pa.Column(pa.String),
    'objective': pa.Column(pa.String),
    'pacing_type': pa.Column(pa.String, nullable=True),
    'primary_attribution': pa.Column(pa.String),
    'promoted_object': pa.Column(pa.String, nullable=True),
    'smart_promotion_type': pa.Column(pa.String),
    'source_campaign_id': pa.Column(pa.String),
    'spend_cap': pa.Column(pa.Float, nullable=True),
    'start_time': pa.Column(pa.DateTime),
    'status': pa.Column(pa.String),
    'stop_time': pa.Column(pa.DateTime, nullable=True),
    'topline_id': pa.Column(pa.String),
    'updated_time': pa.Column(pa.DateTime)
}, strict='filter', coerce=True, add_missing_columns=True)

adsets_schema = pa.DataFrameSchema({
    'id': pa.Column(pa.String),
    'account_id': pa.Column(pa.String),
    'adlabels': pa.Column(pa.String, nullable=True),
    'adset_schedule': pa.Column(pa.String, nullable=True),
    'attribution_spec': pa.Column(pa.String, nullable=True),
    'budget_remaining': pa.Column(pa.Int),
    'campaign_active_time': pa.Column(pa.Int),
    'campaign_attribution': pa.Column(pa.String),
    'campaign_id': pa.Column(pa.String),
    'configured_status': pa.Column(pa.String),
    'created_time': pa.Column(pa.DateTime),
    'daily_budget': pa.Column(pa.Float, nullable=True),
    'daily_min_spend_target': pa.Column(pa.Float, nullable=True),
    'daily_spend_cap': pa.Column(pa.Float, nullable=True),
    'destination_type': pa.Column(pa.String),
    'effective_status': pa.Column(pa.String),
    'end_time': pa.Column(pa.DateTime, nullable=True),
    'name': pa.Column(pa.String),
    'optimization_goal': pa.Column(pa.String),
    'optimization_sub_event': pa.Column(pa.String),
    'pacing_type': pa.Column(pa.String, nullable=True),
    'promoted_object_pixel_id': pa.Column(pa.String, nullable=True),
    'promoted_object_custom_event_type': pa.Column(pa.String, nullable=True),
    'source_adset_id': pa.Column(pa.String),
    'start_time': pa.Column(pa.DateTime),
    'status': pa.Column(pa.String),
    'updated_time': pa.Column(pa.DateTime)
}, strict='filter', coerce=True, add_missing_columns=True)

ads_schema = pa.DataFrameSchema({
    'id': pa.Column(pa.String),
    'account_id': pa.Column(pa.String),
    'ad_active_time': pa.Column(pa.Int, nullable=True),
    'ad_review_feedback': pa.Column(pa.String, nullable=True),
    'ad_schedule_end_time': pa.Column(pa.DateTime, nullable=True),
    'ad_schedule_start_time': pa.Column(pa.DateTime, nullable=True),
    'adlabels': pa.Column(pa.String, nullable=True),
    'adset_id': pa.Column(pa.String),
    'bid_amount': pa.Column(pa.Float, nullable=True),
    'campaign_id': pa.Column(pa.String),
    'configured_status': pa.Column(pa.String),
    'conversion_domain': pa.Column(pa.String, nullable=True),
    'created_time': pa.Column(pa.DateTime),
    'creative_id': pa.Column(pa.String),
    'creative_asset_groups_spec': pa.Column(pa.String, nullable=True),
    'effective_status': pa.Column(pa.String),
    'issues_info': pa.Column(pa.String, nullable=True),
    'last_updated_by_app_id': pa.Column(pa.String, nullable=True),
    'name': pa.Column(pa.String),
    'preview_shareable_link': pa.Column(pa.String),
    'recommendations': pa.Column(pa.String, nullable=True),
    'source_ad_id': pa.Column(pa.String, nullable=True),
    'status': pa.Column(pa.String),
    'tracking_specs': pa.Column(pa.String),
    'updated_time': pa.Column(pa.DateTime)
}, strict='filter', coerce=True, add_missing_columns=True)

insights_ads_schema = pa.DataFrameSchema({
    "date": pa.Column(pa.DateTime),
    "account_id": pa.Column(pa.String),
    "account_name": pa.Column(pa.String),
    "ad_id": pa.Column(pa.String),
    "ad_name": pa.Column(pa.String),
    "objective": pa.Column(pa.String),
    "optimization_goal": pa.Column(pa.String),
    "impressions": pa.Column(pa.Int, nullable=False, default=0),
    "reach": pa.Column(pa.Int, nullable=False, default=0),
    "spend": pa.Column(pa.Float),
    "action_page_engagement": pa.Column(pa.Int, nullable=False, default=0),
    "action_post_engagement": pa.Column(pa.Int, nullable=False, default=0),
    "action_video_view": pa.Column(pa.Int, nullable=False, default=0),
    "action_post_reaction": pa.Column(pa.Int, nullable=False, default=0),
    "action_like": pa.Column(pa.Int, nullable=False, default=0),
    "action_link_click": pa.Column(pa.Int, nullable=False, default=0),
    "action_landing_page_view": pa.Column(pa.Int, nullable=False, default=0),
    "action_lead": pa.Column(pa.Int, nullable=False, default=0),
    "action_onsite_conversion_messaging_conversation_started_7d": pa.Column(pa.Int, nullable=False, default=0),
    "action_offsite_conversion_fb_pixel_initiate_checkout": pa.Column(pa.Int, nullable=False, default=0),
    "action_offsite_conversion_fb_pixel_purchase": pa.Column(pa.Int, nullable=False, default=0),
    "video_p25_watched_actions": pa.Column(pa.Int, nullable=False, default=0),
    "video_p50_watched_actions": pa.Column(pa.Int, nullable=False, default=0),
    "video_p75_watched_actions": pa.Column(pa.Int, nullable=False, default=0),
    "video_p95_watched_actions": pa.Column(pa.Int, nullable=False, default=0),
    "video_p100_watched_actions": pa.Column(pa.Int, nullable=False, default=0),
    "action_post": pa.Column(pa.Int, nullable=False, default=0),
    "action_onsite_conversion_post_save": pa.Column(pa.Int, nullable=False, default=0),
    "action_comment": pa.Column(pa.Int, nullable=False, default=0)
}, strict='filter', coerce=True, add_missing_columns=True)
